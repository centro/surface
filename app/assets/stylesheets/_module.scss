// ==========================================================================
// Module  
// ========================================================================== 

// DESC:

// This file contains reusable "modules" that define functionally and 
// stylistically related components that can be reused across pages and 
// across applications. 

// TOC:

// Buttons
// Forms
// FOOTER
// HEADER
// Icons
// LISTS
// NAVIGATION
// NOTICES
// UTILITIES

// ========================================================================== 

/*
## Buttons
Interact with buttons to view their `:hover`, `:focus` and `:active` states:
```
<a class="m-button l-mg-right(1/4)">Default</a>
<a class="m-button m-button--primary l-mg-right(1/4)">Default + Primary</a>
<a class="m-button" disabled="disabled">Disabled</a>
```
If even greater emphasis is needed, button’s size can be increased: 
```
<a class="m-button--large l-mg-right(1/4)">Large</a>
<a class="m-button--large m-button--primary l-mg-right(1/4)">Large + Primary</a>
<a class="m-button--large" disabled="disabled">Disabled</a>
```
*/

.m-button {
  background: $grayscale-0; // Fallback for older browsers.
  @include background-image(linear-gradient(hsl(0, 0, 97%), $grayscale-0));
  @include border-radius(3px);
  border: 1px solid $grayscale-1;
  color: $grayscale-4 !important;
  cursor: pointer;
  display: inline-block;
  font-size: modular-scale(-1);
  height: $base-line-height + 6;
  line-height: $base-line-height + 4;
  padding: 0 8px;
  text-decoration: none;
}

.m-button:hover {
  @include background-image(linear-gradient(white, $grayscale-0));
  color: $grayscale-4;
}

.m-button:focus {
  @include box-shadow(0 0 4px white inset);
  outline: none;
}

.m-button:active {
  @include background-image(none);
  background-color: $grayscale-0;
}

.m-button[disabled] {
  @extend .m-button;
  color: $grayscale-3 !important;
  cursor: not-allowed !important;
  text-shadow: none;
}

.m-button--large {
  @extend .m-button;
  font-size: modular-scale(0) !important;
  height: $base-line-height + ($base-line-height / 2);
  line-height: $base-line-height + ($base-line-height / 2) - 2;
  padding: 0 $gutter-width * 0.75;
}

.m-button--primary:not([disabled]) {
  background: lighten($centro-brand-2b, 2%);
  @include background-image(linear-gradient(lighten($centro-brand-2b, 6%), $centro-brand-2b));
  border-color:  darken($centro-brand-2b, 4%);
  color: white !important;
  font-weight: 600;
  text-shadow: 0 1px 1px rgba(black, 0.2);
}

.m-button--primary:hover:not([disabled]) {
  background: lighten($centro-brand-2b, 4%);
  @include background-image(linear-gradient(lighten($centro-brand-2b, 8%), $centro-brand-2b));
  @include box-shadow(0 1px 2px rgba(black, 0.2));
  border-color:  darken($centro-brand-2b, 6%);
}

.m-button--primary:active:not([disabled]) {
  @include background-image(linear-gradient($centro-brand-2b, lighten($centro-brand-2b, 6%)));
}

/*
## Forms
The most basic form element consists of a top aligned label and a 
corresponding text input:

```
<div class="m-form__field l-mg-btm(0) l-width(50)">
  <label class="m-form__label" for="label">Label</label>
  <input class="m-form__input" id="label" type="text">
</div>
```

Form errors are triggered differently by each application, but they 
should be marked up consistently:

```
<div class="m-form__field--error l-mg-btm(0) l-width(50)">
  <label class="m-form__label" for="error">Label</label>
  <input class="m-form__input" id="error" type="text">
  <div class="m-form__input__error">
    <span>This is an error message.</span>
  </div>
</div>
```

Depending on space constraints it may be desirable to use infield 
labels. In Surface, there are two ways to implement this:

1. Use the browser’s native placeholder attribute (not supported in IE8)
2. If IE8 support is required, use a JavaScript plug-in like [infield-label.js](/js/libs/jquery/infield-label.js) 

Examples of both implementations are provided below:

```
<!-- Native browser implementation with placeholder attribute -->

<div class="m-form__infield l-width(50)">
  <input class="m-form__input" placeholder="Placeholder Label" type="text">
</div>

<!-- JavaScript implementation using infield-label.js -->

<div class="m-form__infield l-mg-btm(0) l-width(50)">
  <label class="m-form__label--infield" for="js">JavaScript Label</label>
  <input class="m-form__input" id="js" type="text">
</div>
```

Though not frequently used up until this point, Surface does support 
left and right aligned field labeling, but [try and use 
them sparingly](http://www.lukew.com/ff/entry.asp?504). Due to the difference in input 
width, inline errors are tweaked slightly to support this layout method. 
```

<!-- Left aligned inline labels -->

<div class="m-form__inline-field l-width(50)">
  <label class="m-form__label--inline l-width(25)" for="label">Label:</label>
  <input class="m-form__input--inline l-width(75)" id="label" type="text">
</div>

<!-- Right aligned inline labels -->

<div class="m-form__inline-field l-width(50)">
  <label class="m-form__label--inline t-right l-width(25)" for="label">Label:</label>
  <input class="m-form__input--inline l-width(75)" id="label" type="text">
</div>

<!-- Inline error handling -->

<div class="m-form__inline-field--error l-mg-btm(0) l-width(50)">
  <label class="m-form__label--inline t-right l-width(25)" for="label">Label:</label>
  <input class="m-form__input--inline l-width(75)" id="label" type="text">
  <div class="m-form__input__error--inline">
    <span>This is an error message.</span>
  </div>
</div>
```

By default, inputs are pretty large. Chances are, there will be 
instances when you’ll want to use an input that is a little more space 
efficient:

```
<div class="m-form__field l-mg-btm(0) l-width(50)">
  <label class="m-form__label--narrow" for="narrow">Label</label>
  <input class="m-form__input--narrow" id="narrow" type="text">
</div>
```

One other feature to be aware of is the way Surface can handle password 
inputs. Where appropriate, we can allow users to [mask and unmask 
password attempts](/js/libs/jquery/surface-styleguide.js). For example:  

```
<div class="m-form__field l-mg-btm(0) l-width(50)">
  <a href="#" class="js-masking-toggle m-form__input-toggle--visible-label">Show</a>
  <label class="m-form__label" for="password">Password</label>
  <input class="m-form__input--password" id="password" type="password">
</div>
```

Because `<select>` elements are notoriously difficult to customize with 
CSS alone, we keep things simple by default.

```
<div class="m-form__field l-mg-btm(0) l-width(25)">
  <select class="m-form__input--select">
    <option>Option 1</option>
    <option>Option 2</option>
    <option>Option 3</option>
  </select>
</div>
```

However, Surface does provide a few styles for custom CSS dropdowns, 
should you want to include them in your application. Keep in mind that this approach 
will rely on a [bit of JavaScript](/js/libs/jquery/surface-styleguide.js) to function properly:

```
<!-- Default -->

<div class="m-form__dropdown l-mg-btm(1) l-width(25)">
  <span class="m-form__dropdown__selected"></span>
  <ul>
    <li><a href="#">Option 1</a></li>
    <li><a href="#">Option 2</a></li>
    <li><a href="#">Option 3</a></li>
  </ul>
</div>

<!-- Narrow -->

<div class="m-form__dropdown--narrow l-mg-btm(0) l-width(25)">
  <span class="m-form__dropdown__selected"></span>
  <ul>
    <li><a href="#">Option 1</a></li>
    <li><a href="#">Option 2</a></li>
    <li><a href="#">Option 3</a></li>
  </ul>
</div>
```

You may wish to label groups of related inputs or call 
out special instructions that govern the successful completion of a form:

```
<h3 class="m-form__legend l-mg-btm(0) l-width(75)">
  This Title Describes Related Inputs 
  <span>All fields required.</span>
</h3>
```

Marking up form submission controls is straightforward: 

```
<div class="m-form__controls l-mg-btm(0)">
  <input class="m-button--large m-button--primary" type="submit" 
  value="Submit">
  <p class="l-mg-left(1/4)">
    By submitting, you agree to our terms of service.
  </p>
</div>
```

Finally, here’s an example of how you might assemble a form using the 
pieces documented above as well as requisite layout classes.

```
<fieldset class="l-clearfix l-mg-btm(1/2) l-width(75)">
  <h3 class="m-form__legend">
    Personal Information
    <span>All fields required.</span>
  </h3>
  <div class="m-form__field l-left l-mg-right(1gut4) l-width(2of4)">
    <label class="m-form__label" for="first_name">First name</label>
    <input class="m-form__input" id="first_name" type="text">
  </div>
  <div class="m-form__field l-left l-width(2of4)">
    <label class="m-form__label" for="last_name">Last name</label>
    <input class="m-form__input" id="last_name" type="text">
  </div>
  <div class="m-form__field l-left l-mg-right(1gut4) l-width(1of4) ">
    <label class="m-form__label">Prefix</label>
    <div class="m-form__dropdown l-mg-btm(0)">
      <span class="m-form__dropdown__selected"></span>
      <ul>
        <li><a href="#">-- choose --</a></li>
        <li><a href="#">Mr.</a></li>
        <li><a href="#">Mrs.</a></li>
        <li><a href="#">Ms.</a></li>
      </ul>
    </div>
  </div>
  <div class="m-form__field l-left l-width(3of4)">
    <label class="m-form__label" for="email">Email address</label>
    <input as="string" class="m-form__input" id="email" type="text">
  </div>
</fieldset>

<div class="m-form__controls l-mg-btm(0)">
  <input class="m-button--large m-button--primary" type="submit" value="Submit">
  <a class="m-button--large l-mg-left(1/4)" href="#">Cancel</a>
</div>
```

*/

// Fields

.m-form__field {
  margin-bottom: $base-line-height;
  position: relative;
}

.m-form__field > * {
  line-height: inherit;
}

.m-form__field--error {
  @extend .m-form__field;
  color: $centro-alert-1;
  position: relative;
}

.m-form__infield,
.m-form__controls {
  @extend .m-form__field;
  height: $base-line-height * 1.5;
  line-height: $base-line-height * 1.5;
}

.m-form__infield--error {
  @extend .m-form__field--error;
  @extend .m-form__infield;
}

.m-form__inline-field {
  @extend .m-form__field;
  font-size: 0; // Counteracts word space added by inline-block
}

.m-form__inline-field--error {
  @extend .m-form__field--error;
  @extend .m-form__inline-field;
}

.m-form__controls > p {
  color: $grayscale-3;
  display: inline-block;
  font-size: modular-scale(-1);
  padding-top: 2px;
  white-space: nowrap;
}

// Inputs

.m-form__input {
  @include box-shadow(inset 0 1px 2px rgba(black, 0.1));
  @include transition(all 0.1s 0s);
  border: 1px solid $grayscale-1;
  font-size: modular-scale(0);
  height: $base-line-height * 1.5;
  line-height: 1em; 
  padding: 0 ($gutter-width / 2);
  width: 100%;
}

.ie8 .m-form__input {
  line-height: 1em;
  padding-top: 10px;
}

.m-form__input:focus {
  border-color: $centro-brand-2b; 
  outline: 0;
}

.m-form__input--inline {
  @extend .m-form__input;
  display: inline-block;
}

.m-form__input--narrow {
  @extend .m-form__input;
  font-size: modular-scale(-1);
  height: $base-line-height + 6px;
  padding: 0 6px;
}

.m-form__input--password {
  @extend .m-form__input;
}

.m-form__input--search {
  @extend .m-form__input;
  padding-left: 32px;
}

.m-form__input--select {
  width: 100%;
}

.m-form__input-toggle {
  font-size: modular-scale(-1);
  position: absolute;
    top: 2px;
    right: $gutter-width / 2;
}

.m-form__input-toggle--visible-label {
  @extend .m-form__input-toggle;
  top: 32px;
}

// Legend

.m-form__legend {
  @include pie-clearfix;
  border-top: 1px solid $grayscale-0;
  color: $centro-brand-3c;
  margin-bottom: $base-line-height;
  padding-top: $base-line-height / 3;
}

.m-form__legend:first-of-type {
  border-top: none;
}

.s-has-errors .m-form__legend {
  color:  $grayscale-2;
}

.m-form__legend > span {
  color: $grayscale-2;
  font-size: modular-scale(-1);
  float: right;
  text-align: right;
}

// Labels

.m-form__label {
  cursor: pointer;
  display: block;
  line-height: 1;
  padding-bottom: $base-line-height / 4;
  white-space: nowrap;
}

.m-form__label--infield {
  color: $grayscale-3; 
  cursor: text;
  padding-left: 10px;
  position: absolute;
}

.m-form__label--inline {
  cursor: pointer;
  display: inline-block;
  font-size: modular-scale(0);
  padding-right: $gutter-width / 4;
}

.m-form__label--narrow {
  @extend .m-form__label;
  font-size: modular-scale(-1);
}

::-webkit-input-placeholder {
  color: $grayscale-3; 
  cursor: text;
}

.m-form__input::-webkit-input-placeholder {
    padding-top: 2px;
}

:-moz-placeholder {
  color: $grayscale-3; 
  cursor: text;
  padding: 0;
}

::-moz-placeholder {
  color: $grayscale-3; 
  cursor: text;
  padding: 0;
}

:focus::-webkit-input-placeholder {
  opacity: 0.5;
}

:focus:-moz-placeholder {
  opacity: 0.5;
}

:focus::-moz-placeholder {
  opacity: 0.5;
}

// Errors

.m-form__field--error > .m-form__input,
.m-form__field--error > .m-form__input--narrow {
  border-color: lighten($centro-alert-1, 5%);
}

.m-form__input__error {
 @include opacity(0);
 padding: 5px 0 0 0;
 position: absolute;
  left: -10px;
  bottom: -4px;
  white-space: nowrap;
 visibility: hidden;
 z-index: 100;
}

.m-form__input__error > span {
  @include box-shadow(0 3px 6px rgba(black, 0.1));
  @include transition(all ease 0.1s 0.1s);
  background: white;
  border: 1px solid $grayscale-1;
  display: block;
  font-size: modular-scale(-1);
  line-height: $base-line-height + 4px;
  height: $base-line-height + 6px;
  padding: 0 8px;
  position: absolute;
  z-index: 100;
}

.m-form__input__error > span:before {
  content: "";
  display: block;
  border-left: 10px solid transparent;
  border-right: 10px solid transparent;
  border-bottom: 10px solid darken($grayscale-1, 6%);
  height: 0;
  position: absolute;
    top:  -10px;
    left: 10px;
  width: 0;
  z-index: 101;
}

.m-form__input__error > span:after {
  content: "";
  display: block;
  border-left: 9px solid transparent;
  border-right: 9px solid transparent;
  border-bottom: 9px solid white;
  height: 0;
  position: absolute;
    top: -9px;
    left: 11px;
  width: 0;
  z-index: 102;
}

[class*="--error"] > .m-form__input:focus + .m-form__input__error,
[class*="--error"]:hover > .m-form__input__error {
  @include opacity(1);
  visibility: visible;
}

.m-form__input__error--inline {
  @extend .m-form__input__error;
  left: 18.5%;
}

// Custom

.m-form__dropdown {
  @include transition(none !important);
  @include box-shadow(inset 0 1px 2px rgba(black, 0.1));
  border: 1px solid $grayscale-1;
  background: white;
  line-height: $base-line-height * 1.5 - 2;
  height: $base-line-height * 1.5;
  padding: 0 8px;
  position: relative;
  width: 100%;
}

.m-form__dropdown--narrow {
  @extend .m-form__dropdown;
  font-size: modular-scale(-1);
  line-height: $base-line-height + 4;
  height: $base-line-height + 6;
  padding: 0 6px;
}

.m-form__dropdown:hover {
  @include box-shadow(none);
}

.m-form__dropdown__selected {
  color: $grayscale-5;
  display: block !important;
  margin-bottom: 0 !important;
  position: relative;
}

.m-form__dropdown__selected:after {
  @extend .i-icon;
  color: $grayscale-1;
  content: "\25BE";
  font-size: 8px;
  height: 1em;
  line-height: 1em;
  margin-top: -0.5em;
  position: absolute;
  top: 50%;
  right: 0;
  width: 1em;
}
.m-form__dropdown > ul {
  @include box-shadow(0 4px 2px -2px rgba(black, 0.1));
  background: white;
  border: 1px solid $centro-brand-2b;
  border-top: none;
  color: $grayscale-5;
  opacity: 0;
  position: absolute;
    left: -1px;
    right: -1px;
    top: 34px;
  visibility: hidden;
  line-height: 1em;
  z-index: 10;
}

.m-form__dropdown--narrow > ul {
  top: 28px;
}

.m-form__dropdown > ul li {
  height: $base-line-height * 1.5 ;
  line-height: $base-line-height * 1.5;
  overflow: hidden;
}

.m-form__dropdown--narrow > ul li {
  line-height: $base-line-height + 6;
  height: $base-line-height + 6;
}

.m-form__dropdown > ul li a {
  color: $grayscale-3;
  display: block;
  padding: 0 6px; 
  position: relative;
}

.m-form__dropdown > ul li a.s-is-active {
  background: $centro-brand-2b;
  color: white;
}

.m-form__dropdown:hover {
  border-color: $centro-brand-2b;
  cursor: pointer;
}

.m-form__dropdown:hover > ul {
  opacity: 1;
  visibility:visible;
}
// [?3] FOOTER
// This implementation of the footer currently serves as a debugging
// line inside of luxo.

.m-footer {
  color: $grayscale-1;
  font-size: modular-scale(-1);
  padding: 0 8px;
  position: fixed;
    bottom: 0;
  text-align: right;
  width: 100%;
}

// [?4] HEADER

.m-header {
  background: $centro-brand-1a;
  border-bottom: none;
  height: $base-line-height + 6px;
  line-height: $base-line-height + 6px;
  position: relative;
  z-index: 100;
}

.m-logo {
  background: transparent image-url("logo.svg") no-repeat left 4px;
  background-size: contain;
  display: inline-block;
  height: 0;
  overflow: hidden;
  margin-left: $gutter-width / 2;
  padding: ($base-line-height + 6px) 0 0 0 !important;
  width: 75px;
}

.m-logo:hover {
  background-color: transparent !important;
}

.ie8 .m-logo {
  background: image-url("logo.png") no-repeat left -2px;
}

/* ## Icons

Surface currently uses a font called [SS 
Standard](http://symbolset.com/icons/standard) to display icons. The 
really cool thing about this particular icon font is that it’s semantic. 
That is, specific icons are mapped to whole words in addition to just 
special Unicode glyphs. 

The simplest way to add an icon within 
Surface is to [look up the keyword for an 
icon](/fonts/ss-standard/documentation.html) and then add the `.i-icon` 
class to the element that contains the keyword: 

```
<p class="i-icon">Logout</p>
```

This strategy is best when an icon’s keyword closes matches the concept 
you are trying to convey. That way, if the icon doesn’t show up for some 
reason, the underlying text would still make sense (this benefit also holds true for those 
using screen readers). 

However, in situations where you want to use an icon with a keyword that 
<em>does not</em> align nicely with the concept you are trying to 
convey, you’ll want to approach the markup a bit differently: 

```
<p>
  <span class="i-icon">&#xED50;</span>
  <span class="t-screen-reader-text">Campaigns</span>
</p>
```

In the example above, we used the Unicode glyph `&#xED50` to display a 
“list” icon. But obviously, if we didn’t provide some alternate text, 
things could get a bit cryptic for screen readers (or in situations 
where the icon fails to render.) With a little additional markup we can 
provide fallback text that will be readable by assistive 
devices, but that will only be visible if CSS is turned off.  

Situations may arise where you’d like to use an icon without 
having it appear as content within the DOM. It’s outside the scope of 
this document to explain the reasons for doing this, but here’s an 
example of how you might use such a method:

```
<ul>
  <li class="i-icon--before" data-icon="mail">Contact Us</li>
</ul>
```

In the event that you’d like to add icon support to your own custom 
element you can do so by using the `@extend` directive native to 
SASS, which is documented [here](http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#extend). 

In this particular case, simply add the line `@extends .i-icon;` to your 
custom element’s  CSS declaration block.

*/

.i-icon {
  cursor: pointer;
  display: inline-block;
  font-family: "SS Standard";
  font-style: normal;
  font-weight: normal;
  text-decoration: none;
  text-rendering: optimizeLegibility;
  white-space: nowrap;
  padding-top: 2px !important; // Align to vertical middle.

  -webkit-font-feature-settings: "liga";
  -moz-font-feature-settings: "liga=1";
  -moz-font-feature-settings: "liga";
  -ms-font-feature-settings: "liga" 1;
  -o-font-feature-settings: "liga";
  font-feature-settings: "liga";

  -webkit-font-smoothing: antialiased;
}

.i-icon--before {
  padding-left: 1.5em;
  position: relative;
}

.i-icon--before:before {
  @extend .i-icon;
  content: attr(data-icon);
  position: absolute;
  left: 0;
}

/* ## Lists

In Surface, unordered lists are marked up without a great deal of 
fanfare: 

```
<ul>
  <li>Item 1</li>
  <li>Item 2</li>
  <li>Item 3</li>
</ul>
```

By default, `line-height` for list items is inherited from the 
`body` element, which is set to the equivalent of 1 baseline unit 
(24px). This creates a pleasing default vertical rhythm. 

If a greater degree of control is required, the line-height of default 
list can be compressed. Vertical rhythm can then be modified through the use of layout classes, like 
so:

```
<ul class="m-list--compressed">
  <li class="l-mg-btm(1/6) t-lighter t-small">Item 1 Title</li>
  <li class="l-mg-btm(1)">Item 1</li>
  <li class="l-mg-btm(1/6) t-lighter t-small">Item 2 Title</li>
  <li class="l-mg-btm(1)">Item 2</li>
  <li class="l-mg-btm(1/6) t-lighter t-small">Item 3 Title</li>
  <li class="l-mg-btm(1)">Item 3</li>
  <li class="l-mg-btm(1/6) t-lighter t-small">Item 4 Title</li>
  <li class="l-mg-btm(0)">Item 4</li>
</ul>
```

For navigation menus, Surface provides a couple of slightly different 
options for tabs. The first option is the more subtle of the two:

```
<div class="l-width(75)" style="border: 1px solid #e2e7e9;">
  <ul class="m-tabs">
    <li><a href="#">Item 1</a></li>
    <li class="s-is-active"><a href="#">Item 2</a></li>
    <li><a href="#">Item 3</a></li>
  </ul>
</div>

<!-- The following <div> is for demonstrative purposes only -->

<div class="l-width(75)" style="border:1px solid #e2e7e9; border-top:none; height: 20px;"></div>
```

While the second option provides a little shading to help the active tab 
stand out a little more from those that surround it:

```
<div class="l-width(75)" style="border: 1px solid #e2e7e9;">
  <ul class="m-tabs--shaded">
    <li><a href="#">Item 1</a></li>
    <li class="s-is-active"><a href="#">Item 2</a></li>
    <li><a href="#">Item 3</a></li>
  </ul>
</div>

<!-- The following <div> is for demonstrative purposes only -->

<div class="l-width(75)" style="background:#f0f3f4;border:1px solid #e2e7e9;border-top:none;height: 20px;"></div>
```

*/

.m-list-horiz {
  @include pie-clearfix;
}

.m-list-horiz > li {
  float: left;
  margin-right: $gutter-width;
}

.m-list-horiz li:last-child {
  margin-right: 0;
}

// Strip out line height for control of vertical <li> spacing.

.m-list--compressed {
  line-height: 1;
}

.m-list--compressed > li {
  margin-bottom: $base-line-height / 4;
}

.m-list--compressed > li:last-child {
  margin-bottom: 0;
}

.m-tabs {
  @extend .m-list-horiz;
}

.m-tabs > li {
  border-color: transparent;
  border-style: solid;
  border-width: 0 1px;
  color: $grayscale-3;
  cursor: pointer;
  margin: 0 !important;
  position: relative;
  white-space: nowrap;
}

.m-tabs > li a {
  @include link-colors($grayscale-3, $grayscale-5);
  display: inline-block;
  line-height: $base-line-height * 2;
  padding: 0 ($gutter-width * 0.75);
}

.m-tabs > li.s-is-active {
  background: transparent;
  border-color: $grayscale-0;
  color: $grayscale-5;
  &:first-child { 
    border-left-color: transparent;
  }
}

.m-tabs > li.s-is-active:after {
  content: "";
  width: 100%;
  border-bottom: 1px solid white;
  position: absolute;
    left: 0;
    bottom: -1px;
}

.m-tabs > li.s-is-active a {
  color: $grayscale-5;
}

.m-tabs--shaded {
  @extend .m-tabs;
}

.m-tabs--shaded li.s-is-active {
  background-color: lighten($grayscale-0, 5%);
}

.m-tabs--shaded > li.s-is-active:after {
  border-color: lighten($grayscale-0, 5%);
}

// [?7] NAVIGATION

.m-nav  {
  @extend .m-list-horiz;
  line-height: $base-line-height + 6;
  height: $base-line-height + 6;
}

.m-nav > li {
  line-height: $base-line-height + 6;
  height: $base-line-height + 6;
  margin: 0 !important;
  position: relative;
}

.m-nav.l-left > li:not(:last-child) {
  border-right: 1px solid hsl(195, 40%, 40%);
}

.m-nav.l-right > li {
  border-left: 1px solid hsl(195, 40%, 40%);
}

.m-nav > li > a {
  @include link-colors(white);
  display: block;
  font-size: modular-scale(-1);
  height: $base-line-height + 6;
  padding: 0 $gutter-width / 2;
}

.m-nav > li > a:hover {
   background-color: hsl(195, 90%, 25%);
}

.m-nav__sub-menu {
  @include opacity(0);
  position: absolute;
  visibility: hidden;
  width: ($column-width * 2) + $gutter-width;
}

// Account for :hover gap between trigger and target.

.m-nav__sub-menu > li:first-child:before {
 content: '';
 height: 50%;
 position: absolute;
  left: 0;
  top: -19px;
 width: 100%;
 z-index: -1;
}

/* ## Notices
Surface provides styles for various types of global messages like 
alerts, confirmation messages and notices. Messages will appear just 
below your application’s header and will be styled in way that is consistent with it’s type.  

The default type of message is just a simple 
notice which will disappear after 10 seconds (the JS that handles the 
fade has been turned off for this demo). For example: 

```
<div class="m-header l-mg-btm(1/2)">
  <div class="m-notice-window">
    <div class="m-notice">
      <p>This is a basic system notice.</p>
    </div>
  </div>
</div>
```

Like default system messages, confirmation messages will disappear after 
a short period of time. They do get styled a little differently, 
however:

```
<div class="m-header l-mg-btm(1/2)">
  <div class="m-notice-window">
    <div class="m-notice--confirm">
      <p>This is a system confirmation.</p>
    </div>
  </div>
</div>
```

The following is an example of an alert. Unlike default system messages 
and confirmation messages, alerts will not automatically disappear and 
need to be manually dismissed.

```
<div class="m-header l-mg-btm(1/2)">
  <div class="m-notice-window">
    <div class="m-notice--alert">
      <p>This is a system alert.<a href="#">Dismiss</a></p>
    </div>
  </div>
</div>
```

*/

.m-notice-window {
  position: absolute;
    left: 0;
    top: 30px;
  line-height: 0;
  height: 0;
  text-align: center;
  width: 100%;
  z-index: 100;
}

// Default notice styles.

.m-notice {
  @include border-radius(4px);
  background: white;
  border: 5px solid white;
  display: inline-block;
  line-height: 0;
  position: relative;
    top: -18px;
}

.m-notice > p {
  @include border-radius(2px);
  background: $centro-alert-2;
  border: 1px solid darken($centro-alert-2, 10%);
  display: inline-block;
  font-size: modular-scale(-1);
  height: $base-line-height + 6;
  line-height: $base-line-height + 2;
  overflow: hidden;
  padding: 0 ($gutter-width / 2);
  position: relative;
}

.m-notice > p:before {
  @extend .i-icon;
  display: none;
  font-size: $base-font-size;
  position: absolute;
    left: 10px;
    top: -1px;
}

.m-notice > p > a {
  color: $grayscale-2;
  display: none;
  padding-left: 8px;
  text-decoration: underline;
}

.m-notice > p > a:hover {
  color: $grayscale-5;
}

// Custom notice styles.

.m-notice--alert,
.m-notice--confirm {
  @extend .m-notice;
}

.m-notice--alert > p,
.m-notice--confirm > p {
  color: white;
  padding-left: 32px;
  text-shadow: 0 1px 2px rgba(black, 0.2);
}

.m-notice--alert > p:before,
.m-notice--confirm > p:before {
  display: block;
  font-size: modular-scale(-1);
  line-height: $base-line-height + 6;
}

.m-notice--alert > p {
  background: $centro-alert-1;
  border-color: darken($centro-alert-1, 10%); 
}

.m-notice--alert > p:before  {
  content: '\26A0';
}

.m-notice--alert > p > a {
  color: $grayscale-1;
  display: inline;
}

.m-notice--alert > p > a:hover {
  color: white; 
}

.m-notice--confirm > p {
  background: $centro-confirm-2;
  border-color: darken($centro-confirm-2, 2%); 
}

.m-notice--confirm > p:before {
  content: '\2713';
}

// Overlay

.m-overlay {
  background: rgba(0,0,0,0.3);
  font-size: 0; /* Removes extra space added by inline block */
  height: 100%;
  position: fixed;
    left: 0;
    top:0;
  width: 100%;
  z-index: 1000;
}

.m-overlay__container {
  @include box-sizing(border-box);
  overflow: hidden;
  position: absolute;
    top: 10%;
    bottom: 10%;
  text-align: center;
  width: 100%;
}

.m-overlay__container:before {
  content: '';
  display: inline-block;
  height: 100%;
  vertical-align: middle;
}

.m-overlay__content {
  @include box-shadow(0 4px 8px rgba(black, 0.25));
  background: white;
  border: 1px solid $grayscale-3;
  display: inline-block;
  font-size: 1rem;
  max-height: 100%;
  position: relative;
  text-align: left;
  vertical-align: middle;
  z-index: 1001;
}

.m-overlay__content--primary,
.m-overlay__content--secondary {
  @include pie-clearfix;
  padding: $gutter-width;
}

.m-overlay__content--secondary {
  background: $grayscale-0;
  border-top: 1px solid $grayscale-1;
}

.m-overlay__close {
  @extend .t-delete;
  @extend .i-icon;
  position: absolute;
    right: 9px;
    top: 6px;
}

// [?9] UTILITIES

// Card

.m-card {
  @include background-image(linear-gradient(white, hsl(0, 0, 98%)));
  @include border-radius(5px);
  @include transition(all ease 0.1s 0.1s);
  border: 1px solid $grayscale-1;
  padding: $gutter-width !important;
  margin-right: $gutter-width;
  position: relative;
  text-shadow: 0 1px 0px white;
  width: 100%;
}

.m-card:hover {
  @include box-shadow(0 1px 4px rgba($centro-brand-2b, 0.25));
  border-color: $centro-brand-2b;
  cursor: pointer;
}

.m-card > a {
  color: $grayscale-5;
  height: 100%;
  position: absolute;
    left: 0;
    top: 0;
  text-align: center;
  width: 100%;
}

.m-card > a > span {
  @extend .t-thin;
  font-size: modular-scale(6);
  line-height: 1em;
  margin-top: -0.4em;
  position: absolute;
    left: 0;
    top: 50%;
  width: 100%;
}

// Tooltip

.m-tooltip {
  @include box-shadow(0 3px 6px rgba(black, 0.1));
  @include opacity(0);
  @include transition(all ease 0.1s 0.1s);
  background: white;
  border: 1px solid $grayscale-1;
  color: $grayscale-3;
  position: absolute;
  visibility: hidden;
  z-index: 100;
}

.m-trigger:hover .m-tooltip,
.m-tooltip:hover {
  @include opacity(1);
  visibility: visible;
}

.m-tooltip > li {
  border-top: 1px solid $grayscale-0;
  line-height: 1em;
  padding: ($gutter-width / 2);
}

.m-tooltip > li:first-child {
  border: none;
}

.m-tooltip > li:first-child:before {
 content: '';
 height: 20px;
 position: absolute;
  left: 0;
  top: -19px;
 width: 100%;
 z-index: -1;
}

.m-tooltip:before {
  content: "";
  display: block;
  border-left: 10px solid transparent;
  border-right: 10px solid transparent;
  border-bottom: 10px solid darken($grayscale-1, 6%);
  height: 0;
  margin-left: -10px;
  position: absolute;
    top: -10px;
    left: 50%;
  width: 0;
  z-index: 101;
}

.m-tooltip:after {
  content: "";
  display: block;
  border-left: 9px solid transparent;
  border-right: 9px solid transparent;
  border-bottom: 9px solid white;
  height: 0;
  margin-left: -9px;
  position: absolute;
    top: -9px;
    left: 50%;
  width: 0;
  z-index: 102;
}

.m-tooltip--condensed {
  @extend .m-tooltip;
}

.m-tooltip--condensed > li {
  border: none;
  padding: ($gutter-width / 2) ($gutter-width / 2) 0;
}

.m-tooltip--condensed > li:last-child {
  padding-bottom: 10px;
}

.m-tooltip--left-arrow,
.m-tooltip--right-arrow,
.m-tooltip--no-arrow {
  @extend .m-tooltip;
}

.m-tooltip--left-arrow:before,
.m-tooltip--left-arrow:after {
  margin: 0;
}

.m-tooltip--left-arrow:before {
  left: 20px;
}

.m-tooltip--left-arrow:after {
  left: 21px;
}

.m-tooltip--right-arrow:before,
.m-tooltip--right-arrow:after {
  left: auto;
  margin: 0;
}

.m-tooltip--right-arrow:before {
  right: 20px;
}

.m-tooltip--right-arrow:after {
  right: 21px;
}

.m-tooltip--no-arrow:before,
.m-tooltip--no-arrow:after {
  display: none; 
}

// Triggers

.m-trigger {
  position: relative;
}

.m-nav .m-trigger > a {
  cursor: pointer;
}

.m-nav .m-trigger:hover > a {
  background: darken($centro-brand-1a, 2.5%);
}
